name: docker_build_push_acr
 
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
 
jobs:
  docker_build_push_acr:
    name: 'Docker Build and Push to ACR'
    runs-on: ubuntu-latest
   # container:
      #image: WeatherForecast.Api/Dockerfile
    environment: production
  
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #  defaults:
  #    run:
  #       shell: bash
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

 
  #  - name: Setup .NET Core
  #    uses: actions/setup-dotnet@v3
  #    with:
  #       dotnet-version: 8.0.x 
  
 #   - name: Build with dotnet
 #     run: dotnet build --configuration Release
 
    - name: Unit Tests
      run: dotnet test WeatherForecast.Test/WeatherForecast.Test.csproj --logger "console;verbosity=detailed"

   # - name: Postman Tests
    #  run: |
   #    cd WeatherForecast.Api
    #   docker-compose up

    # Make directory to upload the test results
    - name: Make Directory for results
      run: mkdir -p testResults

    # Install the newman command line utility and also install the html extra reporter
    - name: Install newman
      run: |
       npm install -g newman
       npm install -g newman-reporter-htmlextra
    

    - name: Run test cases
      id: run-test-cases
      run: |
       echo --- Running test cases ---
       #docker-compose -f  -p  \WeatherForecast.Api
       #up --build --exit-code-from 
       #docker build -f ./WeatherForecast.Api/Dockerfile .
       #docker run -d -p 8081:80 .
       echo --- BUILD ---
       docker build -f ./WeatherForecast.Api/Dockerfile -t weatherforecastapi:latest .
       echo --- RUN ---
       #docker run --detach -p 8081:80 weatherforecastapi .     
       docker run --detach -p 8080:8080 weatherforecastapi .
       #docker logs matter 
       netstat -tulpn
       
       #--network host
       #-e SIGNING_PROXY_LISTEN="0.0.0.0:8081"      --expose 8081 
       #echo --- CREATE ---
       #docker create --name abc ./WeatherForecast.Api/Dockerfile
       #echo --- START ---
       #docker start abc
       #echo --- CHECK ---
       
       docker ps
       sleep 10s
       #curl -v http://0.0.0.0:8081/weather-forecast
       #curl -v http://localhost:8081/weather-forecast
       curl -v http://0.0.0.0:8080/weather-forecast
       #curl -v host.docker.internal:8081
       
       echo --- NEWMAN ---
       newman run ./PostmanCollections/weather-forecast-api.json -e ./PostmanCollections/weather-forecast-api-env.json -r htmlextra --reporter-htmlextra-export testResults/htmlreport.html --reporter-htmlextra-darkTheme  > testResults/runreport1.html
       echo --- Completed test cases ---
     
    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
 
    - name: Build the frontend image and push it to ACR
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/weatherforecastapi66:${{ github.sha }}
        file: WeatherForecast.Api/Dockerfile
